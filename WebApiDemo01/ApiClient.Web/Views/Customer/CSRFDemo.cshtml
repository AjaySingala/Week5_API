
@{
    ViewData["Title"] = "CSRFDemo";
}

<h2>CSRFDemo</h2>

<h1>Congratulations! You're a Winner!</h1>
<form action="http://good-banking-site.com/api/account" method="post">
    <input type="hidden" name="Transaction" value="withdraw">
    <input type="hidden" name="Amount" value="1000000">
    <input type="submit" value="Click to collect your prize!">
</form>

@*
    Anti-Forgery Tokens:
    To help prevent CSRF attacks, ASP.NET MVC uses anti-forgery tokens, 
    also called request verification tokens.

    1. The client requests an HTML page that contains a form.
    2. The server includes two tokens in the response.
        One token is sent as a cookie. 
        The other is placed in a hidden form field. 
        The tokens are generated randomly so that an adversary cannot 
        guess the values.
    3. When the client submits the form, it must send both tokens back to the server. The client sends the cookie token as a cookie, and it sends the form token inside the form data. (A browser client automatically does this when the user submits the form.)
    4. If a request does not include both tokens, the server disallows the request.
*@

@*
    All of the forms in ASP.NET Core MVC and Razor Pages templates
    generate antiforgery tokens.
    Razor Pages are automatically protected from XSRF/CSRF.
    The following pair of view examples generate antiforgery tokens:
*@
@*
    <form asp-controller="Manage" asp-action="ChangePassword" method="post">
        ...
    </form>

    @using (Html.BeginForm("ChangePassword", "Manage"))
    {
    ...
    }
*@

@*
    Explicitly add an antiforgery token to a <form>
    element without using Tag Helpers with the HTML helper
*@

    <form action="CSRFDemo" method="post">
        @Html.AntiForgeryToken()
    </form>


@*
    Apply the [ValidateAntiForgeryToken] filter to actions.
    Requests made to actions that have this filter applied are blocked
    unless the request includes a valid antiforgery token.
*@